#!/usr/bin/env node

var commander = require('commander'),
    path      = p = require('path'),
    chalk     = require('chalk'),
    _         = require('lodash'),
    pkg       = require('../package.json'),
    Monitor       = require('../lib/mon'),
    interface = require('../web/index');

commander.version(pkg.version, '-v, --version')
  .usage('[cmd] [options]');

commander.on('--help', function(){
  console.log('  Basic Examples:\n\n' +
    '    Start the web server, by default port (8088):\n' +
    chalk.grey('    $ fw start\n') +
    '\n' +
    '    Start the web server, by specific port (8090):\n' +
    chalk.grey('    $ fw start 8090\n')
  );
});
commander.on('-c', function(){
  console.log(arguments);
})


// Web interface
commander.command('start [port]')
  .option('--no-debug', 'hide stdout/stderr information')
  .description('Launch the web server, port default by 8088')
  .action(function(port, cmd){
    interface(port, cmd.debug);
  });

// Configuration
var acceptKeys = ['forever', 'refresh', 'manipulation', 'username', 'password'];
function showConfigs(cmd, mon){
  if(!mon){
    mon =  Monitor();
  }
  var storage = mon._config.store, prints = '';
  for(var k in storage){
    prints += chalk.bold(k + ': ') + '\t' + chalk.blue(storage[k] + '\n');
  }
  console.log(prints);
}

commander.command('config')
  .description('show all configs')
  .action(showConfigs);

commander.command('set <key> <value>')
  .description('set config by key-value pairs')
  .action(function(key, value, cmd){
    if(!~acceptKeys.indexOf(key)){
      return console.log('key could only be one of below:', acceptKeys.map(function(m){ return '\n' + chalk.magenta(m)}).join(''));
    }
    var mon = Monitor();
    mon.config(key, value);
    showConfigs(cmd, mon);
  });

commander.command('rm <key>')
  .description('remove config by key')
  .action(function(key, cmd){
    var mon = Monitor();
    mon.config(key, null);
    showConfigs(cmd, mon);
  });

commander.parse(process.argv);

if (process.argv.length == 2) {
  commander.outputHelp();
  process.exit(0);
}
